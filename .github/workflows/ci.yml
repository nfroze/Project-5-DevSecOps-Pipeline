name: üîê CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  security-scans:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v3

      - name: üß† Semgrep (SAST Scan)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/default

      - name: üì§ Upload Semgrep Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.sarif

      - name: üì° Send Semgrep Results to Splunk
        if: always()
        run: |
          if [ -f semgrep.sarif ]; then
            CHANNEL_ID=$(uuidgen)
            DATA=$(cat semgrep.sarif | jq -c .)
            curl -k https://prd-p-44h4s.splunkcloud.com:8088/services/collector \
              -H "Authorization: Splunk ${{ secrets.SPLUNK_HEC_TOKEN }}" \
              -H "Content-Type: application/json" \
              -H "X-Splunk-Request-Channel: $CHANNEL_ID" \
              -d "{\"event\": $DATA}"
          fi

      - name: üõ°Ô∏è Checkov (Terraform Scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform

      - name: üîç Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nfroze/project5-app:latest
          format: json
          output: trivy-results.json

      - name: üì§ Upload Trivy Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.json

      - name: üì° Send Trivy Results to Splunk
        if: always()
        run: |
          if [ -f trivy-results.json ]; then
            CHANNEL_ID=$(uuidgen)
            DATA=$(cat trivy-results.json | jq -c .)
            curl -k https://prd-p-44h4s.splunkcloud.com:8088/services/collector \
              -H "Authorization: Splunk ${{ secrets.SPLUNK_HEC_TOKEN }}" \
              -H "Content-Type: application/json" \
              -H "X-Splunk-Request-Channel: $CHANNEL_ID" \
              -d "{\"event\": $DATA}"
          fi

      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è Gitleaks (Secrets Scan)
        uses: gitleaks/gitleaks-action@v2.2.0
        with:
          args: --source=.

      - name: üì° Send CI final result to Splunk
        env:
          WORKFLOW_NAME: ${{ github.workflow }}
          BRANCH_NAME: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_number }}
        run: |
          CHANNEL_ID=$(uuidgen)
          EVENT_MSG="CI pipeline ${WORKFLOW_NAME} on branch ${BRANCH_NAME} (run #${RUN_ID}) completed"
          curl -k https://prd-p-44h4s.splunkcloud.com:8088/services/collector \
            -H "Authorization: Splunk ${{ secrets.SPLUNK_HEC_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-Splunk-Request-Channel: $CHANNEL_ID" \
            -d "{\"event\": \"${EVENT_MSG}\"}"