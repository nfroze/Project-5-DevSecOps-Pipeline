name: Security Scanning Pipeline

permissions:
  contents: read

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.tf'
      - '.github/workflows/iac.yml'
      - '**/*.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.tf'
      - '.github/workflows/iac.yml'
      - '**/*.md'

jobs:
  # üîç Code Security Scanning
  security-scans:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret detection

      # SAST - Static Application Security Testing
      - name: üîí SAST Scan (Semgrep)
        run: |
          pip install semgrep
          semgrep --config=auto --json --output=semgrep-report.json || true
          
          # Display summary
          if [ -f semgrep-report.json ]; then
            echo "Found $(jq '.results | length' semgrep-report.json) potential issues"
          fi
        continue-on-error: true

      # SCA - Software Composition Analysis  
      - name: üì¶ Dependency Scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: json
          output: trivy-results.json
          severity: 'CRITICAL,HIGH'
          exit-code: 0

      # Secret Detection
      - name: üîë Secret Scan (Gitleaks)
        run: |
          wget -q -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          ./gitleaks detect --source=. --report-format=json --report-path=gitleaks-report.json --exit-code=0 || true
          
          # Display summary
          if [ -f gitleaks-report.json ] && [ -s gitleaks-report.json ]; then
            echo "Found $(jq '. | length' gitleaks-report.json) potential secrets"
          else
            echo "No secrets detected ‚úÖ"
          fi

      # Upload all reports as artifacts
      - name: üì§ Save Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            *-report.json
            *-results.json

      # Security Gate - Fail if critical issues found
      - name: üö¶ Security Gate Check
        run: |
          FAILED=false
          
          echo "=== Security Scan Summary ==="
          
          # Check Trivy
          if [ -f trivy-results.json ]; then
            VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length' trivy-results.json)
            echo "Dependencies: $VULNS critical/high vulnerabilities"
            [ "$VULNS" -gt 0 ] && FAILED=true
          fi
          
          # Check Semgrep
          if [ -f semgrep-report.json ]; then
            ISSUES=$(jq '.results | length' semgrep-report.json)
            echo "Code Quality: $ISSUES potential issues"
            [ "$ISSUES" -gt 5 ] && FAILED=true  # Allow some issues for demo
          fi
          
          # Check Gitleaks
          if [ -f gitleaks-report.json ] && [ -s gitleaks-report.json ]; then
            SECRETS=$(jq '. | length' gitleaks-report.json)
            echo "Secrets: $SECRETS potential leaks"
            [ "$SECRETS" -gt 0 ] && FAILED=true
          else
            echo "Secrets: None detected ‚úÖ"
          fi
          
          echo "============================"
          
          if [ "$FAILED" = true ]; then
            echo "‚ùå Security gate FAILED - fix issues before proceeding"
            exit 1
          else
            echo "‚úÖ Security gate PASSED - proceeding to build"
          fi