name: Continuous Integration

permissions:
  contents: read

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.tf'
      - '.github/workflows/iac.yml'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.tf'
      - '.github/workflows/iac.yml'

jobs:
  # Trivy SCA Scan
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy (SCA Scan)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: json
          output: trivy-results.json
          severity: 'CRITICAL,HIGH,MEDIUM'  # Add severity filter
        continue-on-error: true

      - name: Upload Trivy JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.json

  # Semgrep SAST Scan
  semgrep-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep (JSON Output)
        run: semgrep --config=auto --json --output=semgrep-report.json
        continue-on-error: true

      - name: Upload Semgrep JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.json

  # Gitleaks Secret Scan
  gitleaks-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Generate Gitleaks JSON Report
        if: always()
        run: |
          # Download and run Gitleaks manually for JSON output
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          ./gitleaks detect --source=. --report-format=json --report-path=gitleaks-report.json --exit-code=0 || true

      - name: Upload Gitleaks JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  # Consolidate results and send to Splunk
  consolidate-and-report:
    needs: [trivy-scan, semgrep-scan, gitleaks-scan]
    runs-on: ubuntu-latest
    if: always()  # Run even if scans fail
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: scan-results

      - name: Send Reports to Splunk
        env:
          SPLUNK_HEC_URL: ${{ secrets.SPLUNK_HEC_URL }}
          SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN }}
        run: |
          CHANNEL_ID=$(uuidgen)
          
          # Send each report to Splunk
          for report in scan-results/*/; do
            for file in "$report"*.json; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                sourcetype="${filename%.json}"
                
                echo "Sending $sourcetype to Splunk..."
                curl -k "$SPLUNK_HEC_URL" \
                  -H "Authorization: Splunk $SPLUNK_HEC_TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "{\"event\": $(cat "$file"), \"sourcetype\": \"${sourcetype}\", \"channel\": \"$CHANNEL_ID\"}"
              fi
            done
          done

      - name: Security Gate Check
        run: |
          set -e
          FAILED=false
          
          # Check Trivy results
          if [ -f "scan-results/trivy-results/trivy-results.json" ]; then
            if grep -q '"Vulnerabilities":\s*\[{' scan-results/trivy-results/trivy-results.json 2>/dev/null; then
              echo "❌ Trivy found vulnerabilities"
              FAILED=true
            fi
          fi
          
          # Check Semgrep results
          if [ -f "scan-results/semgrep-report/semgrep-report.json" ]; then
            if jq -e '.results | length > 0' scan-results/semgrep-report/semgrep-report.json >/dev/null 2>&1; then
              echo "❌ Semgrep found issues"
              FAILED=true
            fi
          fi
          
          # Check Gitleaks results
          if [ -f "scan-results/gitleaks-report/gitleaks-report.json" ]; then
            if grep -q '"rule_id":' scan-results/gitleaks-report/gitleaks-report.json 2>/dev/null; then
              echo "❌ Gitleaks found secrets"
              FAILED=true
            fi
          fi
          
          if [ "$FAILED" = true ]; then
            echo "Security checks failed!"
            exit 1
          else
            echo "✅ All security checks passed!"
          fi