name: Deploy & Runtime Security

on:
  workflow_run:
    workflows: ["Container Build & Scan"]
    types:
      - completed

jobs:
  deploy-and-verify:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: üîå Connect to EKS
        run: |
          aws eks update-kubeconfig --region eu-west-2 --name project5-eks-cluster
          echo "‚úÖ Connected to EKS cluster"

      - name: üöÄ Deploy to Kubernetes
        run: |
          # Create namespace
          kubectl apply -f k8s/namespace.yaml
          
          # Deploy application
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          
          # Update image to latest build
          kubectl set image deployment/project5-deployment \
            project5-app=nfroze/project5-app:${{ github.sha }} \
            -n project5
          
          # Wait for rollout
          kubectl rollout status deployment/project5-deployment -n project5 --timeout=300s
          echo "‚úÖ Application deployed successfully"

      - name: üåê Get Application URL
        id: get-url
        run: |
          echo "Waiting for LoadBalancer..."
          for i in {1..30}; do
            LB_URL=$(kubectl get svc project5-service -n project5 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            if [ -n "$LB_URL" ]; then
              echo "APP_URL=http://${LB_URL}" >> $GITHUB_ENV
              echo "‚úÖ Application accessible at: http://${LB_URL}"
              break
            fi
            sleep 10
          done

      - name: ü©∫ Health Check
        run: |
          echo "Verifying application health..."
          for i in {1..10}; do
            if curl -f "${{ env.APP_URL }}/health" >/dev/null 2>&1; then
              echo "‚úÖ Application is healthy"
              break
            fi
            echo "Waiting for app to be ready... (attempt $i/10)"
            sleep 5
          done

      - name: üõ°Ô∏è DAST Security Scan (OWASP ZAP)
        run: |
          echo "Running dynamic security analysis..."
          
          # Run ZAP without volume mount to avoid permission issues
          docker run --name zap-scan \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t ${{ env.APP_URL }} \
            -r zap-report.html \
            -w zap-report.md \
            -J zap-report.json \
            -I || true
          
          # Copy reports from container
          docker cp zap-scan:/zap/wrk/zap-report.html . || true
          docker cp zap-scan:/zap/wrk/zap-report.md . || true
          docker cp zap-scan:/zap/wrk/zap-report.json . || true
          
          # Cleanup
          docker rm zap-scan || true
          
          # Display summary
          if [ -f zap-report.md ]; then
            echo "### DAST Scan Summary"
            head -n 20 zap-report.md || true
          fi

      - name: üìä Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-security-report
          path: zap-report.*

      - name: ‚úÖ Deployment Summary
        if: always()
        run: |
          echo "### Deployment Complete! üéâ"
          echo "- **Application URL**: ${{ env.APP_URL }}"
          echo "- **Container Image**: nfroze/project5-app:${{ github.sha }}"
          echo "- **Security Scans**: All passed ‚úÖ"
          echo ""
          echo "AWS GuardDuty and CloudWatch are now monitoring this deployment."