name: Continuous Build

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: nfroze/project5-app
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true  # Load into docker daemon for scanning
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail here, we'll check later

      - name: Upload Trivy JSON Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-report.json

      - name: Send Trivy JSON report to Splunk
        if: always()
        env:
          SPLUNK_HEC_URL: ${{ secrets.SPLUNK_HEC_URL }}
          SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN }}
        run: |
          if [ -f trivy-report.json ]; then
            curl -k "$SPLUNK_HEC_URL" \
              -H "Authorization: Splunk $SPLUNK_HEC_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"event\": $(cat trivy-report.json), \"sourcetype\": \"trivy-image-scan\", \"channel\": \"$(uuidgen)\"}"
          fi

      - name: Check scan results and push if clean
        run: |
          # Check for vulnerabilities
          if jq -e '.Results[]?.Vulnerabilities | length > 0' trivy-report.json >/dev/null 2>&1; then
            echo "❌ Vulnerabilities found in Docker image"
            echo "Summary:"
            jq -r '.Results[]?.Vulnerabilities[]? | "- \(.Severity): \(.PkgName) \(.VulnerabilityID)"' trivy-report.json || true
            exit 1
          fi
          
          echo "✅ No vulnerabilities found, pushing image..."
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          # Also tag and push as 'latest' for convenience
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:latest