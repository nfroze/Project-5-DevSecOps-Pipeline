name: Continuous Build

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: nfroze/project5-app
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Trivy image scan and generate JSON
        run: |
          trivy image --ignore-unfixed --format json -o trivy-report.json $IMAGE_NAME:$IMAGE_TAG

      - name: Upload Trivy JSON Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Send Trivy JSON report to Splunk
        if: always()
        env:
          SPLUNK_HEC_URL: ${{ secrets.SPLUNK_HEC_URL }}
          SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN }}
        run: |
          if [ -f trivy-report.json ]; then
            curl -k "$SPLUNK_HEC_URL" \
              -H "Authorization: Splunk $SPLUNK_HEC_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"event\": $(cat trivy-report.json), \"sourcetype\": \"trivy-image-scan\", \"channel\": \"$(uuidgen)\"}"
          fi

      - name: Fail if vulnerabilities found
        run: |
          if jq '.Results[].Vulnerabilities | length > 0' trivy-report.json | grep true; then
            echo "‚ùå Vulnerabilities found in Docker image"
            exit 1
          fi

      - name: Push image to Docker Hub
        run: docker push $IMAGE_NAME:$IMAGE_TAG